package cmd

import (
	"fmt"
	"os"

	"github.com/Duck-005/wannagit/utils"
	"github.com/spf13/cobra"
)

func tagCreate(repo utils.Repo, name string, ref string, createObject bool) {
	sha := ObjectFind(repo, ref, "", true)

	if createObject {
		tag := &utils.GitTag{}
		tag.Data["object"][0] = sha 
		tag.Data["type"][0] = "commit"
		tag.Data["tag"][0] = name
		
		tag.Data["tagger"][0] = "wannagit <wannagit@example.com>"
		tag.Data[""][0] = "A tag generated by wannagit, which won't let you customize the message.\n"

		tagSha := utils.ObjectWrite(tag, repo)
		createRef(repo, "tags/" + name, tagSha)
	} else {
		createRef(repo, "tags/" + name, sha)
	}
}

func createRef(repo utils.Repo, refName string, sha string) {
	path, err := utils.RepoFile(repo, true, "refs/" + refName)
	utils.ErrorHandler("couldn't create ref object file", err)

	file, err := os.OpenFile(path, os.O_APPEND|os.O_CREATE|os.O_WRONLY, os.ModePerm)
	utils.ErrorHandler("couldn't create tag object", err)

	file.WriteString(sha + "\n")
}

var tagCmd = &cobra.Command{
	Use:   "tag [NAME] [OBJECT] [-a]",
	Short: "add a reference in refs/tags/",
	Long: `create direct and indirect references to objects`,
	Run: func(cmd *cobra.Command, args []string) {
		if len(args) < 2 {
			fmt.Print("Usage: tag [NAME] [OBJECT] [-a]")
			return 
		}

		repo := utils.RepoFind(args[1], true)
		createObject, _ := cmd.Flags().GetBool("storeTrue")

		if args[0] != "" {
			tagCreate(repo, args[0], args[1], createObject)
		} else {
			refs := listRef(repo, "")
			showRef(repo, refs["tags"].(map[string]any), false, "")
		}
	},
}

func init() {
	rootCmd.AddCommand(tagCmd)

	tagCmd.Flags().BoolP("storeTrue", "a", false, "create a new tag object pointing at HEAD or OBJECT")
}
